@page "/order"
@using CasperDelivery.Interfaces
@using CasperDelivery.Interfaces.Specifications
@using System.Security.Claims
@using CasperDelivery.Interfaces.Repositories
@inject IGenericRepository<Orders> GenericOrderRepo
@inject IOrdersRepository OrderRepo
@inject AuthenticationStateProvider authProv

@if (_ordersList != null)
{
  <div class="container-fluid" style="width: 75%;">
    <h1 class="mt-4 text-center my-header"> My Orders</h1>
    <div class="accordion" id="orders-accordion">
      @foreach (var item in orders)
      {
        <div class="accordion-item">
          <h2 class="accordion-header" id="heading-@item.Id">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@item.Id" aria-expanded="false" aria-controls="collapse-@item.Id">
              <div class="d-flex justify-content-between align-items-center">
                <span>Order @item.Id - @item.Date.Date.ToString("MMMM dd, yyyy")
                  - @String.Format("{0:0.00}",@item.TotalPrice) $</span>
              </div>
            </button>
          </h2>
          <div id="collapse-@item.Id" class="accordion-collapse collapse" aria-labelledby="heading-@item.Id" data-bs-parent="#orders-accordion">
            <div class="accordion-body">
              <table class="table table-striped table-bordered">
                <thead>
                <tr>
                  <th style="width: 100px;">Image</th>
                  <th>Product Name</th>
                  <th style="width: 100px;">Quantity</th>
                  <th style="width: 100px;">Price</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var oi in item.Items)
                {
                  <tr>
                    <td><img src="images/Products/@oi.Product.PictureUrl" alt="Product 1" width="50"></td>
                    <td>@oi.Product.Name</td>
                    <td>@oi.Quantity</td>
                    <td>$ @String.Format("{0:0.00}", (oi.Product.Price * oi.Quantity))</td>
                  </tr>
                }
                </tbody>
              </table>
            </div>
          </div>
        </div>

      }
    </div>
  </div>
}
else
{
  <h1 class="text-center">You have no orders yet!</h1>
}

@code {
  List<OrderItem> _ordersList = new List<OrderItem>();
  List<Orders> orders= new List<Orders>();

  string userId;

  protected override async Task OnInitializedAsync()
  {
    var authenticationState = await authProv.GetAuthenticationStateAsync();
    var user = authenticationState.User;
    userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
    _ordersList = await OrderRepo.GetOrdersByUserIdAsync(userId);
    orders = _ordersList.GroupBy(oi => oi.Order).Select(group => group.Key).ToList();
  }

}