@page "/cart"
@using CasperDelivery.Interfaces
@using CasperDelivery.Interfaces.Specifications
@using System.Security.Claims
@using CasperDelivery.Interfaces.Repositories
@inject ICartRepository basketRepo
@inject IGenericRepository<BasketItem> basketItemRepo
@inject IAddressRepository addressRepo
@inject ICartService cartService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager


@if (_basketItems != null)
{
    <div class="card mt-4 mb-3">
        <div class="row">
            <div class="col-md-8 cart">
                <div class="title">
                    <div class="row">
                        <div class="col"><h4><b>Shopping Cart</b></h4></div>
                        <div class="col align-self-center text-right text-muted">@_basketItems.Count items</div>
                    </div>
                </div>
                
                @if (_basketItems.Count > 0)
                {
                @foreach (var item in _basketItems)
                {
                     <div class="row border-top border-bottom">
                         <div class="row main align-items-center">
                             <div class="col-2"><img class="img-fluid" src="images/Products/@item.Product.PictureUrl"></div>
                             <div class="col">
                                 <div class="row text-muted">@item.Product.Name</div>
                                 <div class="row">@item.Product.Description</div>
                             </div>
                             <div class="col">
                                 <a onclick="@(async () =>  await DeleteOneItemQuantity(item.ProductId, item.Quantity - 1))">-</a>
                                 <a class="border">@item.Quantity</a>
                                 <a onclick="@(async () =>  await AddItemQuantity(item.ProductId, item.Quantity + 1))">+</a>
                             </div>
                             <div class="col">@String.Format("{0:0.00}", item.Product.Price * item.Quantity) $ </div>
                                <div class="col"><a onclick="@(async () => await DeleteItemAsync(item.Id))"><span class="oi oi-x end-0"></span> </a></div>
                         </div>
                     </div>
                } 
                }
                else
                {
                    <div class="container">
                        <h4 class="text-center">You have no items in your cart. Feel free to choose something delicious on our site</h4>
                        <div class="d-flex justify-content-center">
                            <img class="gif" src="gif/thinking-penguin.gif" />
                        </div>
                    </div>

                }
               

                <div class="back-to-shop"><a href="#">&leftarrow;<span class="text-muted">Back to shop</span></a></div>
            </div>
            <div class="col-md-4 summary">
                <div><h5><b>Summary</b></h5></div>
                <hr>
                <div class="row">
                    <div class="col" style="padding-left:0;">ITEMS @_basketItems.Count</div>
                    <div class="col text-right"></div>
                </div>
                <form>
                    <p>SHIPPING</p>
                    <select><option class="text-muted">Standard-Delivery- 5.00 $</option></select>  
                </form>
                <div class="row mb-3">
                    @if (userAddress.Street != null)
                    {
                        <h5>Current Address:</h5>
                        <h6>@userAddress.FirstName @userAddress.LastName</h6>
                        <h6>@userAddress.Street</h6>
                        <h6>@userAddress.PhoneNumber</h6>
                        <a href="/setaddress"> <button class="btn">Change Address</button></a>
                    }
                    else
                    {
                        <a href="/setaddress"> <button class="btn">+ Add Address</button></a>
                    }
                </div>
                <div class="row" style="border-top: 1px solid rgba(0,0,0,.1); padding: 2vh 0;">
                    <div class="col">TOTAL PRICE</div>
                    @if (_basketItems.Count > 0)
                    {
                        <div class="col text-right">@String.Format("{0:0.00}", _basketItems.Sum(x => x.Product.Price * x.Quantity) + 5)$</div>
                    }
                    else
                    {
                        <div class="col text-right">0 $</div>
                    }
                </div>
                    <button class="btn @ConditionalClass()" @onclick="PlaceOrder">Checkout</button>
            </div>
        </div>
    </div>
}

@code{
    IReadOnlyList<BasketItem> _basketItems;
    int _basketId;
    string userId = "";
    Address userAddress;
    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        var basket = await basketRepo.GetBasketByUserId(userId);
        _basketId = basket.Id;
        userAddress = await addressRepo.GetAddressByUserId(userId);
        var spec = new GetBasketWithItemsSpecification(1);
        _basketItems = await basketItemRepo.ListAsync(spec);
    }

    async Task AddItemQuantity(int productId, int newQuantity)
    {
        await cartService.AddItemToCart(productId);
        var updatedBasket = new List<BasketItem>(_basketItems);
        var itemToUpdate = updatedBasket.Find(x => x.ProductId == productId);
        if (itemToUpdate != null)
        {
            itemToUpdate.Quantity = newQuantity;
            _basketItems = updatedBasket.AsReadOnly();
            StateHasChanged(); // Notify Blazor that the state has changed
        }
    }

    async Task DeleteOneItemQuantity(int productId, int newQuantity)
    {
        if (newQuantity <= 0)
        {
            await cartService.DeleteOneItemFromCart(productId);
            _basketItems = _basketItems.Where(x => x.ProductId != productId).ToList().AsReadOnly();
        }
        else
        {
            await cartService.DeleteOneItemFromCart(productId);
            var updatedBasket = new List<BasketItem>(_basketItems);
            var itemToUpdate = updatedBasket.Find(x => x.ProductId == productId);
            if (itemToUpdate != null)
            {
                itemToUpdate.Quantity = newQuantity;
                _basketItems = updatedBasket.AsReadOnly();
            }
        }
        StateHasChanged(); // Notify Blazor that the state has changed
    }

    async Task DeleteItemAsync(int id)
    {
        await basketItemRepo.DeleteAsync(id);
        _basketItems = _basketItems.Where(x => x.Id != id).ToList().AsReadOnly();
        StateHasChanged();
    }


    string ConditionalClass()
    {
        if (_basketItems.Count == 0 || userAddress.Street == null) return "disabled";
        return "";
    }

    private async Task PlaceOrder()
    {
        string checkoutUrl = await cartService.Checkout(_basketId, userId);
        NavManager.NavigateTo(checkoutUrl);
    }

}